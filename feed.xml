<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>johnokeeffe</title>
    <link href="https://johnokeeffe..ie/feed.xml" rel="self" />
    <link href="https://johnokeeffe..ie" />
    <updated>2022-08-06T00:16:09+01:00</updated>
    <author>
        <name>johnokeeffe</name>
    </author>
    <id>https://johnokeeffe..ie</id>

    <entry>
        <title>Power Automate: Handling JSON schema validation with Parse JSON</title>
        <author>
            <name>johnokeeffe</name>
        </author>
        <link href="https://johnokeeffe..ie/power-automate-handling-json-schema-validation-with-parse-json.html"/>
        <id>https://johnokeeffe..ie/power-automate-handling-json-schema-validation-with-parse-json.html</id>

        <updated>2022-08-06T00:16:09+01:00</updated>
            <summary>
                <![CDATA[
                    Introduction Had a scenario recently when working on a project where I needed to check some required columns from a staging excel file before it was inserted into a master excel file. Now in this case it only was a small subset of the overall&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="introduction">Introduction</h1>
<p>Had a scenario recently when working on a project where I needed to check some required columns from a staging excel file before it was inserted into a master excel file. Now in this case it only was a small subset of the overall columns in the excel were actually needed for the process. But I didn’t want the whole process to fall over if only one row was missing so I used the some scopes, parse JSON and JSON schema magic to build the below solution to get around it.</p>
<h1 id="walk-through">Walk-through</h1>
<h2 id="scenario">Scenario</h2>
<p>In the below fake scenario we receive car owner data in an excel table. We need to take this data and insert the rows in a master excel for analysis. We’re really only looking for the owner personal data and the car vehicle identification
number (vin) as we can lookup the rest of the data from the vin. But if this vin is missing then this data isn’t as useful to us as we can’t guarantee they will also provide there car details.</p>
<h2 id="sample-data">Sample Data</h2>
<table>
<thead>
<tr>
<th>id</th>
<th>first_name</th>
<th>last_name</th>
<th>email</th>
<th>car_make</th>
<th>car_model</th>
<th>car_model_year</th>
<th>car_vin</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Chrisse</td>
<td>Marieton</td>
<td><a href="mailto:&#99;&#109;&#x61;&#x72;&#x69;&#x65;&#116;&#x6f;&#x6e;&#48;&#x40;&#x75;&#x6d;&#x6e;&#x2e;&#x65;&#100;&#117;">&#99;&#109;&#x61;&#x72;&#x69;&#x65;&#116;&#x6f;&#x6e;&#48;&#x40;&#x75;&#x6d;&#x6e;&#x2e;&#x65;&#100;&#117;</a></td>
<td></td>
<td></td>
<td></td>
<td>2G61L5S37E9694881</td>
</tr>
<tr>
<td>2</td>
<td>Dion</td>
<td>Frenchum</td>
<td><a href="mailto:&#100;&#x66;&#114;&#101;&#x6e;&#99;&#104;&#x75;&#x6d;&#x31;&#x40;&#110;&#105;&#x66;&#x74;&#121;&#x2e;&#x63;&#x6f;&#x6d;">&#100;&#x66;&#114;&#101;&#x6e;&#99;&#104;&#x75;&#x6d;&#x31;&#x40;&#110;&#105;&#x66;&#x74;&#121;&#x2e;&#x63;&#x6f;&#x6d;</a></td>
<td></td>
<td></td>
<td></td>
<td>NM0AE8F74E1334359</td>
</tr>
<tr>
<td>3</td>
<td>Brockie</td>
<td>Bushaway</td>
<td><a href="mailto:&#x62;&#98;&#117;&#115;&#104;&#97;&#119;&#97;&#x79;&#50;&#64;&#x67;&#111;&#111;&#x67;&#x6c;&#101;&#46;&#x63;&#111;&#x2e;&#117;&#107;">&#x62;&#98;&#117;&#115;&#104;&#97;&#119;&#97;&#x79;&#50;&#64;&#x67;&#111;&#111;&#x67;&#x6c;&#101;&#46;&#x63;&#111;&#x2e;&#117;&#107;</a></td>
<td></td>
<td></td>
<td></td>
<td>WBAUN1C55DV305824</td>
</tr>
<tr>
<td>4</td>
<td>Janie</td>
<td>Iacomelli</td>
<td><a href="mailto:&#106;&#x69;&#x61;&#99;&#111;&#x6d;&#101;&#x6c;&#x6c;&#x69;&#x33;&#x40;&#x75;&#x69;&#117;&#99;&#46;&#x65;&#x64;&#117;">&#106;&#x69;&#x61;&#99;&#111;&#x6d;&#101;&#x6c;&#x6c;&#x69;&#x33;&#x40;&#x75;&#x69;&#117;&#99;&#46;&#x65;&#x64;&#117;</a></td>
<td></td>
<td></td>
<td></td>
<td>WA1AGAFE7CD051379</td>
</tr>
<tr>
<td>5</td>
<td>Cassie</td>
<td>Housby</td>
<td><a href="mailto:&#x63;&#104;&#111;&#117;&#x73;&#98;&#x79;&#52;&#x40;&#x69;&#x63;&#x71;&#x2e;&#99;&#111;&#109;">&#x63;&#104;&#111;&#117;&#x73;&#98;&#x79;&#52;&#x40;&#x69;&#x63;&#x71;&#x2e;&#99;&#111;&#109;</a></td>
<td>Mitsubishi</td>
<td>Lancer Evolution</td>
<td>2004</td>
<td></td>
</tr>
</tbody></table>
<p>Sample Data Schema <a href="https://www.mockaroo.com/1591bbc0">Mockaroo Link</a></p>
<h2 id="flow-structure-setup">Flow Structure Setup</h2>
<p>To get started I just created a basic flow structure:</p>
<ul>
<li>Variable outputData is an array and we will use this later on as we append data to it</li>
<li>Variable outputAction is going to be use to output the action that was taken ie. <em>“inserted into master table” or “error missing column data”</em></li>
<li>List rows present in the excel table (see above for schema and sample data)</li>
</ul>
<p>I like to use scopes to help with error handling and logical design of the flows. I won’t be discussing scope error handling in this blog but here is a great resource to read over to get you started <a href="https://www.portiva.nl/portiblog/advanced-error-handling-in-power-automate">Advanced error handling in Power Automate</a></p>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/power-automate-handling-json-schema-validation-with-parse-json/pa-setup-01.png" data-is-external-image="true"  alt="Power Automate setup flow" /></figure></p>
<h2 id="flow-json-schema-validation-setup">Flow JSON Schema Validation Setup</h2>
<p>In this step I just create a loop to run through each row returned from the <em>list rows present in a table</em> action from above. Now we need to generate the schema for the parse json easiest way to do this is to just run the flow once. Now what we need to do is take this schema and add some constraints too it. Now in the below example all the data types are strings but this can work with other data types. See the <a href="https://json-schema.org/understanding-json-schema/index.html">JSON Schema Docs</a></p>
<p>Below you can see I have added the <a href="https://json-schema.org/understanding-json-schema/reference/string.html#id5">minLength</a> constraint to some of the objects. This means JSON is looking for each of the objects to have at least one string character present otherwise it will create a validation error. This will be the error we will read from later on. Now just create two more scopes one for the “Happy path” (Success) and the “Unhappy Path” (Error). Setup the “Unhappy path” to only run on <strong>has failed</strong>.</p>
<pre><code class="language-json"> {
  &quot;car_vin&quot;: {
           &quot;type&quot;: &quot;string&quot;,
           &quot;minLength&quot;: 1
       }
 }
</code></pre>
<pre><code class="language-json">{
    &quot;type&quot;: &quot;object&quot;,
    &quot;properties&quot;: {
        &quot;@@odata.etag&quot;: {
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;ItemInternalId&quot;: {
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;minLength&quot;: 1
        },
        &quot;first_name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;minLength&quot;: 1
        },
        &quot;last_name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;minLength&quot;: 1
        },
        &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;minLength&quot;: 1
        },
        &quot;car_make&quot;: {
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;car_model&quot;: {
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;car_model_year&quot;: {
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;car_vin&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;minLength&quot;: 1
        }
    }
}
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/power-automate-handling-json-schema-validation-with-parse-json/pa-main-scope-loop-parse.png" data-is-external-image="true"  alt="Power Automate main scope setup with parse json" /></figure></p>
<h2 id="unhappy-path-important-step">Unhappy Path (Important Step)</h2>
<p>This is the important step and a key to the whole flow. Setup any action in this case im using a compose to make it clearer but setup an expression like the one below that will take the error output from the Parse JSON. </p>
<pre><code class="language-plain">  outputs(&#39;Parse_JSON&#39;)?[&#39;errors&#39;]
</code></pre>
<p>The error output will only appear when the validation has failed otherwise it just displays the body like normal. It outputs an array as seen in the below example. The key objects to look at the <strong>Path</strong>, <strong>errorType</strong> and <strong>message</strong>. If you have more complex schemas some more of this information will become useful to you when handling errors for me in this case I only need two.</p>
<pre><code class="language-json"> [
    {
        &quot;message&quot;: &quot;String &#39;&#39; is less than minimum length of 1.&quot;,
        &quot;lineNumber&quot;: 0,
        &quot;linePosition&quot;: 0,
        &quot;path&quot;: &quot;car_vin&quot;,
        &quot;value&quot;: &quot;&quot;,
        &quot;schemaId&quot;: &quot;#/properties/car_vin&quot;,
        &quot;errorType&quot;: &quot;minLength&quot;,
        &quot;childErrors&quot;: []
    }
]
</code></pre>
<p>Now that I have an array with the errors im going to create another loop, to go though these errors set my <em>outputAction</em> variable with a custom message. This will then be append to the <em>outputData</em> array which will be used later on for a emailed report.</p>
<pre><code class="language-plain">  items(&#39;Apply_to_each_error&#39;)?[&#39;path&#39;]
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/power-automate-handling-json-schema-validation-with-parse-json/pa-unhappy-path.png" data-is-external-image="true"  alt="Power Automate Unhappy Path" /></figure></p>
<h2 id="happy-path">Happy Path</h2>
<p>The happy path in this case is pretty simple and is where you would put the insert into excel table action. In this case I am just setting the <em>outputAction</em> variable again with a custom message to say the insert was a success. Then just appending this to the array which will be used next.</p>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/power-automate-handling-json-schema-validation-with-parse-json/pa-happy-path.png" data-is-external-image="true"  alt="Power Automate Happy Path" /></figure></p>
<h2 id="output">Output</h2>
<p>Last but not least the output of all that data we just logged into the <em>outputData</em> variable. Because the variable I had created at the start is an array this will allow us to use the <em>create html table</em> action easily, to create a html table we can use in Email, Teams etc…</p>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/power-automate-handling-json-schema-validation-with-parse-json/pa-output.png" data-is-external-image="true"  alt="Power Automate Output" /></figure></p>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/power-automate-handling-json-schema-validation-with-parse-json/pa-email-report.png" data-is-external-image="true"  alt="Power Automate Output" /></figure></p>
<h2 id="conclusion">Conclusion</h2>
<p>This isn’t the only approach to error handling in power automate. But I found in this case it was useful way of solving my issue and also learnt something new in the process.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Logic App: Basic XML to JSON Expression Conversion</title>
        <author>
            <name>johnokeeffe</name>
        </author>
        <link href="https://johnokeeffe..ie/logic-app-basic-xml-to-json-expression-conversion.html"/>
        <id>https://johnokeeffe..ie/logic-app-basic-xml-to-json-expression-conversion.html</id>

        <updated>2022-08-06T00:15:06+01:00</updated>
            <summary>
                <![CDATA[
                    Introduction Working with JSON data in logic apps is native and really is a plus for the PaaS solution. Working with XML is also relatively easy, even with xpaths but it is not native like JSON. When I came across the problem myself I found&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="introduction">Introduction</h1>
<p>Working with JSON data in logic apps is native and really is a plus for the PaaS solution. Working with XML is also relatively easy, even with xpaths but it is not native like JSON. When I came across the problem myself I found it much faster and easier taking the approach of simply converting to JSON as I was much more familiar with it.</p>
<p>Below is an overview of the approach I take when working with XML data.</p>
<h2 id="scenario">Scenario</h2>
<p>In the below scenario we receive online orders from our web store. We can receive order requests that could be sent anywhere in the world. When an order comes in, we use the country field under the shipping address as the conditional value. Based off of this value we then send the order request to the distributor supplying that region.</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;PurchaseOrder PurchaseOrderNumber=&quot;99503&quot; OrderDate=&quot;1999-10-20&quot;&gt;
  &lt;Address Type=&quot;Shipping&quot;&gt;
    &lt;Name&gt;Adam Murphy&lt;/Name&gt;
    &lt;Street&gt;123 Maple Street&lt;/Street&gt;
    &lt;City&gt;Mill Valley&lt;/City&gt;
    &lt;State&gt;CA&lt;/State&gt;
    &lt;Zip&gt;10999&lt;/Zip&gt;
    &lt;Country&gt;Ireland&lt;/Country&gt;
  &lt;/Address&gt;
  &lt;Address Type=&quot;Billing&quot;&gt;
    &lt;Name&gt;Tai Yee&lt;/Name&gt;
    &lt;Street&gt;8 Oak Avenue&lt;/Street&gt;
    &lt;City&gt;Old Town&lt;/City&gt;
    &lt;State&gt;PA&lt;/State&gt;
    &lt;Zip&gt;95819&lt;/Zip&gt;
    &lt;Country&gt;Ireland&lt;/Country&gt;
  &lt;/Address&gt;
  &lt;DeliveryNotes /&gt;
  &lt;Items&gt;
    &lt;Item PartNumber=&quot;872-AA&quot;&gt;
      &lt;ProductName&gt;Lawnmower&lt;/ProductName&gt;
      &lt;Quantity&gt;1&lt;/Quantity&gt;
      &lt;USPrice&gt;148.95&lt;/USPrice&gt;
      &lt;Comment&gt;Confirm this is electric&lt;/Comment&gt;
    &lt;/Item&gt;
  &lt;/Items&gt;
&lt;/PurchaseOrder&gt;
</code></pre>
<table>
<thead>
<tr>
<th align="center">Azure</th>
<th align="center">Postman</th>
<th align="center">GitHub Repo</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fjohn-o-keeffe%2FBlogResources%2Fmain%2Flogic-app-basic-xml-json-conversion-samples%2Fazuredeploy.json"><figure class="post__image"><img loading="lazy" src="https://aka.ms/deploytoazurebutton" data-is-external-image="true"  alt="Deploy to Azure" /></figure></a></td>
<td align="center"><a href="https://app.getpostman.com/run-collection/bda8ade15f3e3acddcf6"><figure class="post__image"><img loading="lazy" src="https://run.pstmn.io/button.svg" data-is-external-image="true"  alt="Run in Postman" /></figure></a></td>
<td align="center">[Github Link][Github-repo]</td>
</tr>
</tbody></table>
<h2 id="walk-through">Walk-through</h2>
<h3 id="logic-app">Logic App</h3>
<h4 id="http-trigger">HTTP Trigger</h4>
<p>First setup a HTTP trigger, this will be needed for testing and accepting the XML body content. We will be using <a href="https://www.postman.com/downloads/">Postman</a> in this case to test the logic app URI.</p>
<h4 id="initialize-variable">Initialize Variable</h4>
<p>Now using the initialize variable action we create a string. I use this as an easy way to test and develop expressions, as you can see the expression develop overtime. Troubleshooting using some of the control actions is not easy.</p>
<p>When creating expressions it is always easier to take it one function at a time.</p>
<p>Step 1: First we convert the HTTP trigger body to XML.</p>
<p><figure class="post__image"><img loading="lazy" src="https://raw.githubusercontent.com/john-o-keeffe/BlogResources/main/logic-app-basic-xml-json-conversion-samples/logicapp-http-variable-01.png" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<ul>
<li>This then outputs the trigger body content in it’s XML format. In this case it is always better to be explicit here.</li>
</ul>
<pre><code class="language-plain">xml(triggerBody())
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-variable-02.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<p>Step 2: We convert the XML to JSON. This will then allow us to access these elements.</p>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-variable-03.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<ul>
<li>This is easy to do so far due to the native XML and JSON expression functions.</li>
</ul>
<pre><code class="language-plain">json(xml(triggerBody()))
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-variable-04.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<pre><code class="language-json">{
    &quot;?xml&quot;: {
        &quot;@version&quot;: &quot;1.0&quot;
    },
    &quot;PurchaseOrder&quot;: {
        &quot;@PurchaseOrderNumber&quot;: &quot;99503&quot;,
        &quot;@OrderDate&quot;: &quot;1999-10-20&quot;,
        &quot;Address&quot;: [
            {
                &quot;@Type&quot;: &quot;Shipping&quot;,
                &quot;Name&quot;: &quot;Ellen Adams&quot;,
                &quot;Street&quot;: &quot;123 Maple Street&quot;,
                &quot;City&quot;: &quot;Mill Valley&quot;,
                &quot;State&quot;: &quot;CA&quot;,
                &quot;Zip&quot;: &quot;10999&quot;,
                &quot;Country&quot;: &quot;USA&quot;
            },
            {
                &quot;@Type&quot;: &quot;Billing&quot;,
                &quot;Name&quot;: &quot;Tai Yee&quot;,
                &quot;Street&quot;: &quot;8 Oak Avenue&quot;,
                &quot;City&quot;: &quot;Old Town&quot;,
                &quot;State&quot;: &quot;PA&quot;,
                &quot;Zip&quot;: &quot;95819&quot;,
                &quot;Country&quot;: &quot;USA&quot;
            }
        ],
        &quot;DeliveryNotes&quot;: &quot;Please leave packages in shed by driveway.&quot;,
        &quot;Items&quot;: {
            &quot;Item&quot;: [
                {
                    &quot;@PartNumber&quot;: &quot;872-AA&quot;,
                    &quot;ProductName&quot;: &quot;Lawnmower&quot;,
                    &quot;Quantity&quot;: &quot;1&quot;,
                    &quot;USPrice&quot;: &quot;148.95&quot;,
                    &quot;Comment&quot;: &quot;Confirm this is electric&quot;
                },
                {
                    &quot;@PartNumber&quot;: &quot;926-AA&quot;,
                    &quot;ProductName&quot;: &quot;Baby Monitor&quot;,
                    &quot;Quantity&quot;: &quot;2&quot;,
                    &quot;USPrice&quot;: &quot;39.98&quot;,
                    &quot;ShipDate&quot;: &quot;1999-05-21&quot;
                }
            ]
        }
    }
}
</code></pre>
<p>Step 3: We now start to go down the JSON path to get the country object.</p>
<ul>
<li>PurchaseOrder<ul>
<li>Address[0]<ul>
<li>Country</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Due to the schema selected for this order request there were two address elements. Above shows, having converted it to JSON the address object is now in an array.
It is easy to overcome in this case, as the address we want is on the zero index of this array.</p>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-variable-06.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<ul>
<li>We can see below the value output is the JSON country object.</li>
</ul>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-variable-05.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<pre><code class="language-plain">json(xml(triggerBody()))[&#39;PurchaseOrder&#39;][&#39;Address&#39;][0][&#39;Country&#39;]
</code></pre>
<p>We have a full expression that we can now use in a switch control. Using this in conjunction with HTTP request actions, we can start to send our orders to the distributors.
In this example we will create two <a href="https://requestbin.com/">Request Bin</a> endpoints for testing.</p>
<ul>
<li>In the switch statement below we can use the variable we just created called ‘country’. In addition to this we can add a ‘tolower’ function to the expression as the switch action values are case sensitive.</li>
</ul>
<pre><code class="language-plain">tolower(json(xml(triggerBody()))[&#39;PurchaseOrder&#39;][&#39;Address&#39;][0][&#39;Country&#39;])
</code></pre>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-switch-http-07.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/logicapp-switch-http-08.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<p>The request bin response:</p>
<p><figure class="post__image"><img loading="lazy" src="https://github.com/john-o-keeffe/BlogResources/blob/main/logic-app-basic-xml-json-conversion-samples/requestbin-response-09.png?raw=true" data-is-external-image="true"  alt="Logic app http and variable" /></figure></p>
<h2 id="conclusion">Conclusion</h2>
<p>This isn’t the only approach to working with XML data in logic apps. I found if you are familiar with JSON in logic apps and XML is new to you, this is a quick and easy way to work with XML data.</p>
<h2 id="software-used">Software Used</h2>
<ul>
<li>VS Code</li>
<li>Postman</li>
<li>Request Bin</li>
</ul>

            ]]>
        </content>
    </entry>
</feed>
